#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#define LEN 100

typedef struct _node { struct _node* next; } node;  //일반화
typedef int (*FCMP)(const void*, const void*);
void init_list(node** p);
void* llv_search(void* key, node* base, size_t* num, size_t width, FCMP fcmp);
void* llv_insert(void* key, node* base, size_t* num, size_t width, FCMP fcmp);
void* llv_delete(void* key, node* base, size_t* num, size_t width, FCMP fcmp);
void* llfv_search(void* key, node* base, size_t* num, size_t width, FCMP fcmp);

FILE* fp;


int compare_char(const void* a, const void* b) {
    return  *(const char*)a- *(const char*)b;
}

void init_list(node** p) {
    *p = (node*)malloc(sizeof(node));
    (*p)->next = NULL;
}

void* llv_insert(void* key, node* base, size_t * num, size_t width, FCMP fcmp)
{
    node* t;
    t = (node*)malloc(sizeof(node) + width);
    memcpy(t + 1, key, width);
    t->next = base->next;
    base->next = t;
    (*num)++;
    return t;
}

void* llv_search(void* key, node* base, size_t *num, size_t width, FCMP fcmp)
{
    node* t;
    t=base->next;
    while (t != NULL && fcmp(t + 1, key) != 0)
        t = t->next;
    return (t == NULL ? NULL : t + 1);
}





int main() {
    node* head;
    size_t size = 0;
    char word[100];

    FILE* fp = fopen("C:\\Users\\미경\\Desktop\\name.txt", "r");
    if (fp == NULL) {
        printf("파일 열기 실패\n");
        exit(1);
    }

    init_list(&head);

    // 파일 읽어서 삽입
    while (fscanf(fp, "%s", word) == 1) {
        llv_insert(word, head, &size, strlen(word) + 1, compare_char);
    }
    fclose(fp);

    // 리스트 탐색하며 'k' 또는 'K'로 시작하는 단어 출력
    printf("검색 결과: ");
    node* curr = head->next;
    while (curr != NULL) {
        char* data_ptr = (char*)(curr + 1);  // 데이터 시작 위치 (node + 1)
        if (tolower(data_ptr[0]) == 'k') {
            printf("%s ", data_ptr);
        }
        curr = curr->next;
    }
    printf("\n");

    return 0;
}
