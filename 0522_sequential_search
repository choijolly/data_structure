#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define SIZE 10
#define BASE(i) ((char*)base + (i) * width)

typedef int (*FCMP)(const void*, const void*);

// 네 가지 기본 함수 프로토타입
int lv_search(void* key, void* base, size_t* num, size_t width, FCMP fcmp);
int lv_insert(void* key, void* base, size_t* num, size_t width, FCMP fcmp);
int lfv_search(void* key, void* base, size_t* num, size_t width, FCMP fcmp);
int lv_delete(void* key, void* base, size_t* num, size_t width, FCMP fcmp);

// int 비교 함수
int compare_int(const void* a, const void* b) {
    int va = *(const int*)a;
    int vb = *(const int*)b;
    return va - vb;
}

// 전역 데이터 버퍼와 개수
int data[SIZE];
size_t nitem = 0;

//-----------------------------------------------------------------------------
// 순차 탐색
int lv_search(void* key, void* base, size_t* num, size_t width, FCMP fcmp) {
    for (size_t i = 0; i < *num; i++) {
        if (fcmp(BASE(i), key) == 0)
            return (int)i;
    }
    return -1;
}

//-----------------------------------------------------------------------------
// 삽입 (끝에 추가)
int lv_insert(void* key, void* base, size_t* num, size_t width, FCMP fcmp) {
    if (*num >= SIZE) return -1;
    memcpy(BASE(*num), key, width);
    (*num)++;
    return (int)(*num - 1);
}

//-----------------------------------------------------------------------------

int lfv_search(void* key, void* base, size_t* num, size_t width, FCMP fcmp)
{
    int i = 0, j;
    void* v;
    while (fcmp(BASE(i), key) != 0 && i < *num) i++;
    if (i >= *num) return - 1;
    v = malloc(width);
    memcpy(v, BASE(i), width);
    for (j = i - 1; j >= 0; j--)
        memcpy(BASE(i+1),BASE(i),width);
    memcpy(BASE(0),v,width);
    return 0;
}
//-----------------------------------------------------------------------------
// 삭제 (찾은 위치 이후 요소들을 앞으로 당김)
int lv_delete(void* key, void* base, size_t* num, size_t width, FCMP fcmp) {
    int idx = lv_search(key, base, num, width, fcmp);
    if (idx < 0) return -1;
    memmove(BASE(idx), BASE(idx + 1), ((*num) - (idx + 1)) * width);
    (*num)--;
    return idx;
}

//-----------------------------------------------------------------------------
// 메인 함수
int main(void) {
    srand((unsigned)time(NULL));

    // 1) 0~9 사이 난수 10개 생성 & 삽입
    for (int i = 0; i < SIZE; i++) {
        int r = rand() % 10;
        if (lv_insert(&r, data, &nitem, sizeof(int), compare_int) < 0) {
            fprintf(stderr, "삽입 오류 (버퍼 가득 참)\n");
            return 1;
        }
    }

    for (int i = 0; i < SIZE; i++) {
        
        printf("%d번째: %d\n", i,data[i]);
    }
    printf("랜덤 데이터 %zu개가 생성되어 삽입되었습니다.\n", nitem);

    int key; // 변수는 한 번만 선언

    // 2) 삭제할 숫자 입력
    printf("삭제할 숫자를 입력하세요 (0~9): ");
    if (scanf_s("%d", &key) != 1) {
        fprintf(stderr, "입력 오류\n");
        return 1;
    }

    int pos = lv_search(&key, data, &nitem, sizeof(int), compare_int);
    if (pos >= 0)
        printf("lv_search: 숫자 %d를 인덱스 %d에서 찾았습니다.\n", key, pos);
    else
        printf("lv_search: 숫자 %d를 찾지 못했습니다.\n", key);

    int delpos = lv_delete(&key, data, &nitem, sizeof(int), compare_int);
    if (delpos >= 0)
        printf("lv_delete: 숫자 %d를 인덱스 %d에서 삭제했습니다.\n", key, delpos);
    else
        printf("lv_delete: 숫자 %d를 삭제하지 못했습니다.\n", key);

    for (int i = 0; i < SIZE; i++) {

        printf("%d번째: %d\n", i, data[i]);
    }



    // 3) insert할 숫자 입력
    printf("insert할 숫자를 입력하세요 (0~9): ");
    if (scanf_s("%d", &key) != 1) {
        fprintf(stderr, "입력 오류\n");
        return 1;
    }


    delpos = lv_insert(&key, data, &nitem, sizeof(int), compare_int);
    if (delpos >= 0)
        printf("lv_insert: 숫자 %d를 인덱스 %d에 입력했습니다.\n", key, delpos);
    else
        printf("lv_insert: 숫자 %d를 삽입하지 못했습니다.\n", key);

    for (int i = 0; i < SIZE; i++) {

        printf("%d번째: %d\n", i, data[i]);
    }
}
