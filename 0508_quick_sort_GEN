#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 10
#define BASE(i) ((char*)base + (i) * width)

typedef int(*FCMP)(const void*, const void*);

int intcmp(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

void quick_sort(void* base, size_t num, size_t width, FCMP fcmp) {
    if (num <= 1) return;

    int i = -1;
    int j = num - 1;  
    void* pivot = malloc(width);
    memcpy(pivot, BASE(num - 1), width);

    void* temp = malloc(width);

    while (1) {
        while (fcmp(BASE(++i), pivot) < 0);
        while (fcmp(BASE(--j), pivot) > 0);

        if (i >= j) break;

        memcpy(temp, BASE(i), width);
        memcpy(BASE(i), BASE(j), width);
        memcpy(BASE(j), temp, width);
        i++; j--;
    }

    // pivot과 i 위치 교환
    memcpy(temp, BASE(i), width);
    memcpy(BASE(i), BASE(num - 1), width);
    memcpy(BASE(num - 1), temp, width);

    free(temp);
    free(pivot);

    // 왼쪽, 오른쪽 분할 정렬
    quick_sort(base, i, width, fcmp);  // 왼쪽은 i개
    quick_sort(BASE(i + 1), num - i - 1, width, fcmp);  // 오른쪽
}

int main() {
    int num[SIZE] = { 9,8,7,6,5,4,3,2,1,0 };
    quick_sort(num, SIZE, sizeof(int), intcmp);

    for (int i = 0; i < SIZE; i++) {
        printf("%d ", num[i]);
    }
    printf("\n");
    return 0;
}
