#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define SIZE 10
#define BASE(i) ((char*)base + (i) * width)

typedef int (*FCMP) (const void* a, const void* b);

int compare_int(const void* a, const void* b) {
    return *(const int*)a - *(const int*)b;
}

void downheap(int k, void* base, int  N, int  width, FCMP fcmp)
{
    int i;
    void* v = malloc(width);
    //int v = a[k];
    memcpy(v, BASE(k), width);

    while (k <= N / 2) {
        i = k << 1;
        //if (i < N && a[i] < a[i + 1]) i++;
        if (i < N && fcmp(BASE(i), BASE(i + 1)) < 0) i++;

        //if (v >= a[i]) break;
        if (fcmp(v, BASE(i)) >= 0) break;


            //a[k] = a[i];
        memcpy(BASE(k), BASE(i), width);
        k = i;
    }
    //a[k] = v;
    memcpy(BASE(k), v, width);
    free(v);
}





void heap_sort(void* base, int  N, int  width, FCMP fcmp)
{
    int k;
    void* t = malloc(width);

    for (k = N / 2; k >= 1; k--) {
        downheap(k, base, N, width, fcmp);
    }

    while (N > 1) {
        //t = a[1];
        memcpy(t, BASE(1), width);
        //a[1] = a[N];
        memcpy(BASE(1), BASE(N), width);
        //a[N] = t;
        memcpy(BASE(N), t, width);
        
        downheap(1, base, --N, width, fcmp);
    }
    free(t);

}

int main() {
    int data_heap[SIZE + 1];
    int k;

    srand(time(NULL));

    for (k = 0; k < SIZE; k++) {
        data_heap[k + 1] = rand() % 10;
        printf("%-5d", data_heap[k + 1]);
    }

    printf("\n");

    //heap_sort(data_heap, SIZE);
    heap_sort(data_heap, SIZE, sizeof(int), compare_int);

    for (k = 0; k < SIZE; k++) {
        printf("%-5d", data_heap[k + 1]);
    }

    printf("\n");

    return 0;
}
