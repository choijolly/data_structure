#include <stdio.h>
#include <stdlib.h>
#define MAX 100

typedef struct _node {
    char key;
    struct _node* left;
    struct _node* right;
} node;

node* head, * tail;
node* stack[MAX];
node* queue[MAX];
int top, front, rear;

void init_stack() {
    top = -1;
}

void init_queue() {
    front = rear = 0;
}


int is_stack_empty() {
    return (top == -1);
}

int is_queue_empty() {
    return (front == rear);
}

node* push(node* t) {
    stack[++top] = t;
    return t;
}

node* pop() {
    return stack[top--];
}

node* put(node* t) {
    queue[rear] = t;
    rear = ++rear % MAX;
    return t;
}

node* get() {
    node* t;
    t = queue[front];
    front = ++front % MAX;
    return t;
}

void init_tree() {
    head = (node*)calloc(1, sizeof(node));
    tail = (node*)calloc(1, sizeof(node));
    head->left = tail;
    head->right = tail;
    tail->left = tail;
    tail->right = tail;
}

int is_operator(char k) {
    return (k == '+' || k == '-' || k == '*' || k == '/');
}

void visit(node* t) {
    printf("%c ", t->key);
}

node* make_parse_tree(char* p) {
    node* t;
    while (*p) {
        while (*p == ' ') p++; 

        t = (node*)calloc(1, sizeof(node));
        t->key = *p;
        t->left = tail;
        t->right = tail;

        if (is_operator(*p)) {
            t->right = pop();
            t->left = pop();
        }

        push(t);
        p++;
    }
    return pop();
}

void preorder_traverse(node* t)
{
    if (t != tail)
    {
        visit(t);
        preorder_traverse(t->left);
        preorder_traverse(t->right);
    }
}

int main() {
    char post[256];

    init_stack();
    init_tree();

    while (1) {
        printf("\n\nInput postfix expression (empty to quit): ");
        gets(post); 

        if (post[0] == NULL) break;

        head->right = make_parse_tree(post);
        printf("Pre-order traverse -> ");
        preorder_traverse(head->right);
        printf("\n");
    }

    return 0;
}
