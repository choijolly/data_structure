#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100

int stack[MAX];
int top;

void init_stack(void) {
    top = -1;
}

int is_stack_empty() {
    return top == -1;
}

int push(int t) {
    if (top >= MAX - 1) {
        printf("Stack overflow !!!\n");
        return -1;
    }
    stack[++top] = t;
    return t;
}

int pop() {
    if (is_stack_empty()) {
        printf("Stack underflow !!!\n");
        return -1;
    }
    return stack[top--];
}

int get_stack_top() {
    return is_stack_empty() ? -1 : stack[top];
}

int is_op(char k) {
    return (k == '+' || k == '-' || k == '*' || k == '/');
}

int precedence(char op) {
    if (op == '(') return 0;
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 3;
}

void postfix(char* dst, char* src) {
    char c;
    init_stack();
    while (*src) {
        if (*src == '(') {
            push(*src);
            src++;
        }
        else if (*src == ')') {
            while (get_stack_top() != '(') {
                *dst++ = pop();
                *dst++ = ' ';
            }
            pop();  // '(' 버리기
            src++;
        }
        else if (is_op(*src)) {
            while (!is_stack_empty() &&
                precedence(get_stack_top()) >= precedence(*src)) {
                *dst++ = pop();
                *dst++ = ' ';
            }
            push(*src);
            src++;
        }
        else if (*src >= '0' && *src <= '9') {
            // 피연산자 처리
            while (*src >= '0' && *src <= '9') {
                *dst++ = *src++;
            }
            *dst++ = ' ';
        }
        else {
            // 공백 또는 기타 문자 무시
            src++;
        }
    }

    // 스택에 남은 연산자 처리
    while (!is_stack_empty()) {
        *dst++ = pop();
        *dst++ = ' ';
    }

    if (dst != NULL && dst > dst - 1) {
        *(dst - 1) = '\0';  // 마지막 공백 제거
    }
    else {
        *dst = '\0';
    }
}

int main() {
    char exp[256];
    char src[256] = "(1*(2+3/4)+5)/6+7";
    postfix(exp, src);
    printf("Postfix representation: %s\n", exp);
    return 0;
}
